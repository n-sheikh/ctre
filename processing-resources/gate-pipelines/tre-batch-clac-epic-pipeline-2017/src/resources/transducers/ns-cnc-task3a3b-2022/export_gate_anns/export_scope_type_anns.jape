/**
* Project: CNC - (Shared Task Carried out by Nadia (in May 2022)
* Created by: Nadia Sheikh
* Purpose: 
*	Exports scope type anns. 
*	A scope type annotation is one generated if the encompassing span of text is within the scope of another annotation (a Trigger type annotation). 
*	Each export annotation carrying projected annotations as features includes a feature with the name of the span type ann.
*	The value of this feature is 1 if the token is spanned by the scope type ann and 0 otherwise.
* Development Notes:
* 	Currently the list of scope type anns is hard coded in the variable annSets, ideally this should be parameterized, such that the user can enter the names of scope type annotations
* Use Notes: This jape rule is part of a set of jape rules (identified by file names of the form export_*.jape) tht were used to export annotations generated by the GATE pipeline, This set of export rules projects annotations down to the token level as features of an export_ann. This is annotation is generated by the jape rule generate_export_ann and must be preceded by other jape rules of the form export_*.jape
*/

Imports:{
   import static gate.Utils.*;
}

Phase: ScopeTypeAnn
Input: export_ann
Options: control = all

Rule: STAnn
(
 {export_ann}
):exportAnn -->
{
   gate.AnnotationSet exportAnnSet = (gate.AnnotationSet)bindings.get("exportAnn");
   gate.Annotation exportAnn = exportAnnSet.iterator().next();
   String[] annSets = {"valenceDomainNN", 
   			"modalityDomain",
   			"explicitNegDomainNN",
   			"implicitNegDomainNN",
   			};
   for(String annSet : annSets){
	gate.AnnotationSet coveringAnnSet = gate.Utils.getCoveringAnnotations(inputAS, exportAnn, annSet);
	if(coveringAnnSet.size() != 0){
		exportAnn.getFeatures().put(annSet, 1);
	}else{
		exportAnn.getFeatures().put(annSet, 0);
	}
   }
}  

