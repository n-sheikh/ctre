/**
* Project: CNC - (Shared Task Carried out by Nadia (in May 2022)
* Created by: Nadia Sheikh
* Purpose: 
*   Exports the constituency parse by labelling each token with its path to the root of the constituency tree
* Development Notes:
*    Currently the list of scope type anns is hard coded in the variable annSets, ideally this should be parameterized, such that the user can enter the names of scope type annotations
* Use Notes: This jape rule is part of a set of jape rules (identified by file names of the form export_*.jape) tht were used to export annotations generated by the GATE pipeline, This set of export rules projects annotations down to the token level as features of an export_ann. This is annotation is generated by the jape rule generate_export_ann and must be preceded by other jape rules of the form export_*.jape
*/

Imports:{
   import static gate.Utils.*;
   import java.util.HashMap;
   import java.util.TreeMap;
}

Phase: ConstituencyTree
Input: export_ann
Options: control = all

Rule: Token
(
 {export_ann}
):exportAnn -->
{
   gate.AnnotationSet exportAnnSet = (gate.AnnotationSet)bindings.get("exportAnn");
   gate.Annotation exportAnn = exportAnnSet.iterator().next();
   gate.AnnotationSet syntaxTreeNodeAnnSet = (gate.AnnotationSet)gate.Utils.getCoveringAnnotations(inputAS, exportAnn, "SyntaxTreeNode");
   Map map = new HashMap();
   for (gate.Annotation syntaxTreeNodeAnn : syntaxTreeNodeAnnSet){
   	map.put((Integer)gate.Utils.length(syntaxTreeNodeAnn), (String)syntaxTreeNodeAnn.getFeatures().get("cat"));
   }
   SortedSet<Integer> keys = new TreeSet<>(map.keySet());
   String path = "";
   for (int key: keys) {
   	path = path + "(" + map.get(key) + ")";
   }
   exportAnn.getFeatures().put("constituency_parse", path);  
}




