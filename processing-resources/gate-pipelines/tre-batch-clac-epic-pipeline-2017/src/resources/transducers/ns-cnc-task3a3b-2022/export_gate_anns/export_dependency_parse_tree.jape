/**
* Project: CNC - (Shared Task Carried out by Nadia (in May 2022)
* Created by: Nadia Sheikh
* Purpose: Projects dependency annotations to the Token Level by adding information about each token's governer as a feature
* Development Notes: 
* Use Notes: This jape rule is part of a set of jape rules (identified by file names of the form export_*.jape) tht were used to export annotations generated by the GATE pipeline, This set of export rules projects annotations down to the token level as features of an export_ann. This is annotation is generated by the jape rule generate_export_ann and must be preceded by other jape rules of the form export_*.jape
*/

Imports:{
   import static gate.Utils.*;
   import java.util.HashMap;
}

Phase: DependencyTree
Input: Dependency
Options: control = all

Rule: Dependency
(
 {Dependency}
):dependencyAnn -->
{
   gate.AnnotationSet dependencyAnnSet = (gate.AnnotationSet)bindings.get("dependencyAnn");
   gate.Annotation dependencyAnn = dependencyAnnSet.iterator().next();
   String dependencyType = (String) dependencyAnn.getFeatures().get("kind");
   HashMap<String, String> governer = new HashMap<String, String>();
   governer.put("type", dependencyType);
   ArrayList<Integer> dependencyNodes = (ArrayList<Integer>)dependencyAnn.getFeatures().get("args");
   String governerString = "";
   if(!dependencyType.equals("root")){
	governerString = (String)inputAS.get(dependencyNodes.get(0)).getFeatures().get("string");  	
   }
   governer.put("string", governerString);
   gate.Annotation dependentTokenAnn = (gate.Annotation)inputAS.get(dependencyNodes.get(1));
   gate.AnnotationSet dependentOutputAnnSet = (gate.AnnotationSet) gate.Utils.getContainedAnnotations(inputAS, dependentTokenAnn, "export_ann");
   gate.Annotation dependentOutputAnn = (gate.Annotation) gate.Utils.getOnlyAnn(dependentOutputAnnSet);
   dependentOutputAnn.getFeatures().put("governer", governer);
}

